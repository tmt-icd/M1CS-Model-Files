subsystem=M1CS
component=GLC
description=""""""
receive=[
{
# Command section for commands originating from the TCS
	name=setOpsMode 
	description="Changes the M1CS Operation Mode to Idle, Tracking or Halted."
	requiredArgs=["mode"]
	args=[
			{
				name=mode
				description="Changes the M1CS Operations Mode."
				enum= [HALT, IDLE, TRACK]
			}
		]
}
{
	name=clearOuterLoopState
	description="Resets the state information maintained in the outer loop controller when AO mode changes."
}
{
	name=saveActPos 
	description="Updates the M1CS Actuator Lookup Table for the current zenith angle."
	requiredArgs=["duration"]
	args=[
			{
				name=duration
				description=""
				type=integer
				units=second
			}
		]
}
{
	name=genAMatrix
	description="Measures the interaction matrix at the current zenith angle."
	requiredArgs=["duration"]
	args=[
			{
				name=duration
				description=""
				type=integer
				units=second
			}
		]
}
{
	name=EnableSegment 
	description="Enables control of a given segment."
	requiredArgs=["segment_location"]
	args=[
            {       
				name=segmentLocation
				description="Segment location in form [A-F][1-82]"
				type=string
            }
		]
}
{
	name=DisableSegment 
	description="Disables control of a given segment."
	requiredArgs=["segment_location"]
	args=[
            {       
				name=segmentLocation
				description="Segment location in form [A-F][1-82]"
				type=string
            }
		]
}
{
	name=EnableActuator
	description="Enables control of a given actuator."
	requiredArgs=["ActuatorId"]
	args=[
            {       
				name=segmentLocation
				description="Segment location in form [A-F][1-82]"
				type=string
            }
			{
				name=ActuatorId
				description=""""""
				type=integer
			}
		]	
}
{
	name=DisableActuator
	description="Disables control of a given actuator."
	requiredArgs=["ActuatorId"]
	args=[
            {       
				name=segmentLocation
				description="Segment location in form [A-F][1-82]"
				type=string
            }
			{
				name=ActuatorId
				description=""
				type=integer
			}
		]	
}
{
	name=EnableSensor
	description="Enables use of the measurements made by a given sensor."
	requiredArgs=["SenosorId"]
	args=[
            {       
				name=segmentLocation
				description="Segment location in form [A-F][1-82]"
				type=string
            }
			{
				name=SenosorId
				description=""
				type=integer
			}
		]	
}
{
	name=DisableSensor
	description="Disables use of the measurements made by a given sensor."
	requiredArgs=["SenosorId"]
	args=[
            {       
				name=segmentLocation
				description="Segment location in form [A-F][1-82]"
				type=string
            }
			{
				name=SenosorId
				description=""
				type=integer
			}
		]	
}
{
	name=loggingMode 
	description="Configures what data the M1CS stores in the Engineering Database."
	requiredArgs=["mode"]
	args=[
			{
				name=mode
				description=""
				type=integer
			}
		]
}
{
	name=actuatorToSensorSelfTest 
	description="Allows the telescope operator to verify the actuators and sensors are functioning correctly."
}
{
# Command section for commands originating from the APS
	name=RestoreSensorCalibCoeff
	description="RestoreSensorCalibCoeff() will restore the sensor calibration coefficients corresponding to the key specified by the ‘sensorCalibCoefficientsId’.  This command will return 'success' after the sensor calibration coefficients are placed into service and the M1CS is settled.  Otherwise, it will return 'fail'."
	requiredArgs=["sensorCalibrationCoefficientsId"]
	parameters=[
			{
				name=sensorCalibrationCoefficientsId
				description="ID of the set of calibration coefficients to be loaded."
				type=integer
				minimum=1
			}
		]
        resultType=[
            {
				name=segmentRestored
				description="Indicates which segment locations were restored and which were not.  True/False values returned are in segment location order [A-F][0-82]."
				type=array
				dimensions=[492]
				items = {
					type=boolean
				}
            }
        ]
	completionType=longRunning
}
{
	name=GetSensorCalibCoeff
	description="GetSensorCalibCoeff() will return the ‘sensorCalibCoefId’ key value for the sensor calibration coefficients currently being used by the GLC’s Real-Time Control Loop.  The command will return 0 for the ‘sensorCalibCoefId’ if the current sensor calibration coefficients have not yet been saved into the database."
 	resultType=[
 			{
				name=sensorCalibrationCoefficientsId
				description="Provides current sensor calibration coefficients ID or 0 upon failure"
				type=integer
				minimum=0
			}
		]
	completionType=longRunning
}
{
        name=OffsetSegmentPosition
        description="OffsetSegmentPosition() will update the sensor calibration coefficient’s offset term such that the GLC’s Real-Time Control Loop will offset actuator’s target position by the specified ‘deltaPositions’. If all of a segment’s actuators ‘deltaPositions” are 0 then the segment’s position will not change. If the operation is carried out to completion, the command returns 'success', otherwise it returns 'fail'."
		requiredArgs=["actuatorOffsets"]
        parameters=[
            {
				name=actuatorOffsets
				description="Actuator offsets to apply across the entire primary mirror"
				type=array
				units=meter
				dimensions=[492,3]
				items = {
					type=double
				}
            }
        ]
        resultType=[
            {
				name=status
 				description="Indicates if command was completed successfully or failed"
				enum=[success, fail]
            }
                ]
	completionType=longRunning
}
{
        name=SaveCurrentSensorCalibCoeff
        description="SaveSensorCalibCoeff() will save the sensor calibration coefficients currently being used by the M1CS Real-Time Control Loop to the M1CS database.  It will also save the current waveform parameters being used by the sensor controller FPGA’s that allow the sensors operate near their zero point.  A successful completion will return the ‘sensorCalibrationCoefficientsId’ for the coefficients.  An error saving the coefficients will return a 0."
        requiredArgs=[]
        parameters=[
            {
                name=metadata
                description="Metadata to accompany the saved calibration coefficients dataset (optional)"
                type=string
            }
        ]
        resultType=[
            {
                name=sensorCalibrationCoefficientsId
                description="Sensor Calibration Coefficients ID or 0 upon failure"
                type=integer
				minimum=0
            }
        ]
       completionType=longRunning
}
{
        name=OffloadSensorOffsets
        description="OffloadSensorOffsets() will use the current sensor calibration coefficients offset term to calculate new waveform parameters for the sensor controller FPGA’s that will compensate for the offset currently being applied.  Note, this correction is not numerically exact.  The sensor controller FPGA’s waveforms will be updated and the sensor calibration coefficients offset term will be set to 0.  The new configuration parameters will automatically be stored as if the SaveSensorCalibCoeff command was called. The command returns the ‘sensorCalibrationCoefficientsId’ if successful and 0 otherwise."
        requiredArgs=["segmentLocation"]
        parameters=[
            {
                name=segmentLocation
				description="Segment location in form [A-F][1-82] or ALL for all segments"
				type=string
            }
        ]
		resultType=[
			{
				name=sensorCalibrationCoefficientsId
				description="ID of the new sensor calibration coefficients after offloading or 0 upon failure"
				type=integer
				minimum=0
			}
		]
		completionType=longRunning
}
{
        name=SaveSensorReadings
		description="SaveSensorReadings() will save the current raw sensor height and gap values. If the current sensor calibration coefficients are not already saved then this command will automatically save them as if the SaveSensorCalibCoeff command was called. A successful completion will return the ‘sensorCalibrationDatasetId’.  An error saving the dataset will return a 0."
        requiredArgs=["sensorReadingType"]
        parameters=[
            {
                name=sensorReadingType
 				description="Type indicating whether the saved readings will be of the aligned or diagnostic variety"
                enum=[aligned, diagnostic]
            }
            {
                name=metadata
				description="Accompanying metadata for sensor readings being saved (optional)"
                type=string
            }
        ]
        resultType=[    
            {
                name=sensorCalibrationDatasetId
                type=integer
                description="Provides Sensor Calibration Dataset ID or 0 upon failure"
				minimum=0
            }
        ]
        completionType=longRunning
}
{
        name=GenerateSensorCalibCoeff
		description="GenerateSensorCalibCoeff() will calculate new sensor calibration coefficients for the given ‘segmentLocation’ using the specified ‘algorithm’ and the data defined by the list of ‘sensorCalibrationDatasetIds’ and update the GLC’s Real-Time Loop to use them. Upon successfully updating the Real-Time Loop the SaveSensorCalibCoeff will save the new coefficients.  The available list of algorithms are TBD.  These ‘sensorCalibrationDatasetIds’ would have been saved earlier using the SaveSensorReadings command.  The datasets should be from different zenith angles and (ideally) temperatures as well.  A successful completion will return the ‘sensorCalibCoeffId‘ or 0 upon failure."
        requiredArgs=["segmentLocation", "algorithm", "sensorCalibrationDatasetIds"]
        parameters=[
            {
                name=segmentLocation
				description="Segment location in form [A-F][1-82] or ALL for all segments"
                type=string
            }
            {
                name=algorithm
                description="Algorithm to use to generate coefficients"
                enum=[alg_tbd1, alg_tbd2, alg_tbdn]
            }
        	{
                name=sensorCalibrationDatasetIds
                description="SensorCalibrationDatasetIds"
                type=array
                dimensions=[20]
                items = {
                    type=integer
					minimum=1
                }
            }
        ]
        resultType=[
            {
                name=sensorCalibrationCoefficientsId
                type=integer
                description="Provides Sensor Calibration Coefficients ID or 0 upon failure"
				minimum=0
        	}
        ]
        completionType=longRunning
}
{
        name=CalibrateWarpingHarness
        description="CalibrateWarpingHarness() will recalibrate the motor motion to strain readings calibration parameters for the segment installed at ‘segmentLocation’ for the given ‘warpingHarnessNumber’.  The command will return 'success' upon successful completion recalibration of all listed warping harnesses.  If the recalibration of any of the listed warping harnesses fails the command will return 'failed'."
        requiredArgs=["segmentLocation", "motorNumber"]
        parameters=[    
            {
                name=segmentLocation
				description="Segment location in form [A-F][1-82]"
                type=string
            }       
            {
                name=motorNumber
                description="Warping Harness Motor Number [0=all, 1-21]"
                type=integer
				minimum=0
				maximum=21
            }
        ]
        resultType=[
            {
                name=status
                description="Indicates if command was completed successfully or failed"
                enum=[success, fail]
            }
        ]
        completionType=longRunning
}
{
        name=GetWHConfiguration
        description="GetWHConfiguration() will retrieve the warping harness calibration parameters for the specified segment location."
        requiredArgs=["segmentLocation"]
        parameters=[    
            {
                name=segmentLocation
				description="""Segment location in form "[A-F][1-82]""""
                type=string
            }       
        ]
        resultType=[
            {
				name=status
				description="Indicates if command was completed successfully or failed"
				enum=[success, fail]
            }
        	{
                name=deadbandOffset
				type=array
				units=newton
				dimensions=[21]
                items = {
                    type=float
                }
                description="Deadband Offset"
        	}
            {
                name=deadbandWidth
				type=array
				dimensions=[21]
                items = {
                    type=float
                }
                description="Deadband Width in motor steps"
            }
			{
                name=negativeStrainLimit
				type=array
				units=newton
				dimensions=[21]
				items = {
                    type=float
                }
                description="Negative Strain Limit"
            }
			{
                name=positiveStrainLimit
				type=array
				units=newton
				dimensions=[21]
                items = {
                    type=float
                }
            	description="Positive Strain Limit"
            }
			{
                name=negativeStrainSlope
				type=array
				units=newton
				dimensions=[21]
                items = {
                    type=float
                }
                description="Negative strain slope in newton/motorstep"
            }
			{
                name=positiveStrainSlope
				type=array
				units=newton
				dimensions=[21]
                items = {
                    type=float
                }
            	description="Positive strain slope in newton/motorstep"
            }
        ]
        completionType=longRunning
}
{
        name=ReadWarpingHarness
        description="ReadWarpingHarness() will return the force being applied by the warping harnesses for all of the segments installed on the telescope."
        resultType=[
            {
				name=status
				description="Indicates if command was completed successfully or failed"
				enum=[success, fail]
            }
            {
                name=forces
                description="The force being applied by the warping harnesses for all 492 segments"
				type=array
				units=newton
                dimensions=[492, 21]
                items = {
                    type=float
                }
            }
        ]
        completionType=longRunning
}
{
        name=GetSegmentIds
        description="GetSegmentIds() will return the value of the segment electronic id’s of all of the segments installed on the telescope."
        resultType=[
            {
				name=status
				description="Indicates if command was completed successfully or failed"
				enum=[success, fail]
            }
            {
                name=segmentElectronicsIds
                description="Segment Electronics IDs in Segment ID order [A-F][1-82]"
				type=array
                dimensions=[492]
                items = {
                    type=integer
                }
            }
        ]
        completionType=longRunning
}
{
        name=SetWarpingHarness
        description="SetWarpingHarness() will move the warping harness motors for the segment installed at ‘segmentLocation’ until the associated warping harnesses are applying the requested 'forces' to the segment.  While the M1CS supports sending multiple commands in succession to different ‘segmentLocations’ the command will be rejected if the segment’s warping harness motors are already busy moving."
        requiredArgs=["segmentLocation", "force"]
        parameters=[
            {
                name=segmentLocation
				description="Segment location in form [A-F][1-82]"
                type=string
            }
            {
                name=force
                description="Desired force values for the segment"
                type=array
				units=newton
                dimensions=[21]
                items = {
                    type=float
                }
            }
        ]
        resultType=[
            {
                name=status
                description="Indicates if command was completed successfully or failed"
                enum=[success, fail]
            }
        ]
        completionType=longRunning
}
{
        name=OffsetWarpingHarness
        description="OffsetWarpingHarness() will move the warping harness motors for the segment installed at ‘segmentLocation’ such that the forces applied to the segment are changed by 'deltaForce'.  While the M1CS supports sending multiple commands in succession to different ‘segmentLocations’ the command will be rejected if the segment’s warping harness motors are already busy moving."
        requiredArgs=["segmentLocation", "deltaForce"]
        parameters=[
            {       
				name=segmentLocation
				description="Segment location in form [A-F][1-82]"
				type=string
            }
            {       
				name=deltaForce
				description="Desired delta force values for the segment"
				type=array
				units=newton
				dimensions=[21]
				items = {
					type=float
				}
			}
        ]
        resultType=[
            {
				name=status
				description="Indicates if command was completed successfully or failed"
				enum=[success, fail]
        	}
        ]
        completionType=longRunning
}
{
        name=OffsetWHPosition
        description="OffsetWHPosition() will move the warping harness motors for the segment installed at ‘segmentLocation’ by the specified number of ‘motorSteps’.  While the M1CS supports sending multiple commands in succession to different ‘segmentLocations’ the command will be rejected if the segment’s warping harness are already busy moving."
        requiredArgs=["segmentLocation", "motorOffsets"]
        parameters=[
            {       
				name=segmentLocation
				description="Segment location in form [A-F][1-82]"
				type=string
            }
            {       
				name=motorOffsets
				description="""Fixed motor offsets (steps) for designated segment"""
				type=array
				dimensions=[21]
				items = {
					type=integer
				}
			}
        ]
        resultType=[
            {
				name=status
				description="Indicates if command was completed successfully or failed"
				enum=[success, fail]
            }
        ]
        completionType=longRunning
}
]
# The following commands are send from the M1CS GLC to the M1CS Segment HCD
send=[
	{
		name=GetOneSegSensorConfig
		subsystem=M1CS
		component=SEGHCD
	}
	{
		name=SetOneSegSensorWaveform
		subsystem=M1CS
		component=SEGHCD
	}
	{
		name=GetAllSegSensorConfig
		subsystem=M1CS
		component=SEGHCD
	}
	{
		name=SetAllSegSensorWaveform
		subsystem=M1CS
		component=SEGHCD
	}
	{
		name=SetActuator
		subsystem=M1CS
		component=SEGHCD
	}
	{
		name=EnableActuator
		subsystem=M1CS
		component=SEGHCD
	}
	{
		name=EnableSegment
		subsystem=M1CS
		component=SEGHCD
	}
	{
		name=DisableSegment
		subsystem=M1CS
		component=SEGHCD
	}
	{
		name=EnableEdgeSensor
		subsystem=M1CS
		component=SEGHCD
	}
	{
		name=CalOneWh
		subsystem=M1CS
		component=SEGHCD
	}
	{
		name=CalOneWhAllSegments
		subsystem=M1CS
		component=SEGHCD
	}
	{
		name=CalAllWhOnSegment
		subsystem=M1CS
		component=SEGHCD
	}
	{
		name=CalAllWh
		subsystem=M1CS
		component=SEGHCD
	}
	{
		name=SetSegmentWhStrains
		subsystem=M1CS
		component=SEGHCD
	}
	{
		name=OffsetSegmentWhStrains
		subsystem=M1CS
		component=SEGHCD
	}
	{
		name=GetSegmentWhStrains
		subsystem=M1CS
		component=SEGHCD
	}
	{
		name=OffsetSegmentWhPositions
		subsystem=M1CS
		component=SEGHCD
	}
	{
		name=InitSegmentWhPosition
		subsystem=M1CS
		component=SEGHCD
	}
	{
		name=GetAllWhConfig
		subsystem=M1CS
		component=SEGHCD
	}
]
