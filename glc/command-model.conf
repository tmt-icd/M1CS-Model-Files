subsystem=M1CS
component=GLC
description=""""""
receive=[

{
# Command section for commands originating from the TCS or APS
	name=setM1CSMode
	description="Changes the M1CS Operation Mode to Idle, Tracking or Halted."
	requiredArgs=["mode"]
	args=[
			{
				name=mode
				description="Changes the M1CS Operations Mode."
				enum= [HALT, IDLE, TRACK]
			}
		]
        resultType=[
            {
				name=status
 				description="Indicates if command was completed successfully or failed"
				enum=[SUCCESS, ERROR]
            }
        ]
}
{
	name=clearOuterLoopState
	description="ClearOuterLoopState() allows the TCS to clear the internal state information used by the RTC's outer loop as the TCS corrections module changes between AGWFS and NIFIRAOS."
}
{
	name=saveActPositions
	description="Updates the M1CS Actuator Lookup Table for the current zenith angle."
	requiredArgs=["duration"]
	args=[
			{
				name=duration
				description="The length of time to average the instantaneous actuator positions."
				type=integer
				units=second
			}
		]
        resultType=[
            {
				name=status
 				description="Indicates if command was completed successfully or failed"
				enum=[SUCCESS, ERROR]
            }
        ]
}
{
	name=MeasureAMatrix
	description="Measures the interaction matrix at the current zenith angle and updates the RTC control matrices."
	requiredArgs=["duration","algorithm"]
	args=[
			{
				name=algorithm
				description="Identifier to support more advanced algorithms described in M1CS OCDD to be described.  Initially should be RGB algorithm."
				enum = [RGB]
				units=second
			}
			{
            	name=duration
            	description="The length of time to average the segment heights and actuator positions."
            	type=integer
        	}
		]
        resultType=[
            {
				name=status
 				description="Indicates if command was completed successfully or failed"
				enum=[SUCCESS, ERROR]
            }
        ]
}
{
	name=InitializeSegment
    description=""""
                |Initialise segment in mirror cell location segmentLocation for the electronic id  segmentId.  This command would also
                |1) calculate new sensor waveform parameters for the segment using the segment manufacturing data for this segment and its neighbouring segments
                |2) reset the sensor calibration coefficients used by the RTC.
                |3) TuneSensorPhases() to correct the sensor height and gap waveform parameters.
                |4) Update the A & B matrices to slave the new segment.
                |5) check the strain gauge readouts against the last known values.  Alternatively we may elect to simply reset these values to new default values.
                """"
	requiredArgs=["segmentLocation","segmentId"]
	args=[
            {
				name=segmentLocation
				description="Segment location in form [A-F][1-82]"
				type=string
            }
             {
 				name=segmentId
 				description="Serial number from segments Electronic ID chip"
 				type=long
             }
		]
   resultType=[
            {
				name=status
 				description="Indicates if command was completed successfully or failed"
				enum=[SUCCESS, ERROR]
            }
       ]
}
{
	name=EnableSegment 
	description="EnableSegment() configures the segment located at 'segmentLocation' for operation then adds the segment to the list of segments controlled by the M1CS RTC."
	requiredArgs=["segmentLocation"]
	args=[
            {       
				name=segmentLocation
				description="Segment location in form [A-F][1-82]"
				type=string
            }
		]
   resultType=[
            {
				name=status
 				description="Indicates if command was completed successfully or failed"
				enum=[SUCCESS, ERROR]
            }
       ]
}
{
	name=DisableSegment 
	description="DisableSegment() removes the segment located at 'segmentLocation' from the list of segments controlled by the M1CS RTC, then places the segment in an destacked state."
	requiredArgs=["segmentLocation"]
	args=[
            {       
				name=segmentLocation
				description="Segment location in form [A-F][1-82]"
				type=string
            }
		]
   resultType=[
            {
				name=status
 				description="Indicates if command was completed successfully or failed"
				enum=[SUCCESS, ERROR]
            }
        ]
}
{
	name=EnableActuator
	description="EnableActuator() configures the 'actuator' at 'segmentLocation' for TRACK mode if it is not already tracking, then adds the actuator to the list of actuators controlled by the M1CS RTC."
	requiredArgs=["segmentLocation","ActuatorId"]
	args=[
            {       
				name=segmentLocation
				description="Segment location in form [A-F][1-82]"
				type=string
            }
			{
				name=ActuatorId
				description="Actuator on segment to be enabled."
				enum=[1,2,3,ALL]
			}
		]
		resultType=[
                    {
        				name=status
         				description="Indicates if command was completed successfully or failed"
        				enum=[SUCCESS, ERROR]
                    }
       ]
}
{
	name=DisableActuator
	description="DisableActuator() removes the 'actuator' at 'segmentLocation' from the list of actuators controlled by the M1CS RTC."
	requiredArgs=["segmentLocation", "ActuatorId"]
	args=[
            {       
				name=segmentLocation
				description="Segment location in form [A-F][1-82]"
				type=string
            }
			{
				name=ActuatorId
				description="Actuator on segment to be disabled."
				enum=[1,2,3,ALL]
			}
		]
		resultType=[
                    {
        				name=status
         				description="Indicates if command was completed successfully or failed"
        				enum=[SUCCESS, ERROR]
                    }
       ]
}
{
	name=EnableSensor
	description="EnableSensor() adds the 'sensor' at 'segmentLocation' to the list of sensors for the M1CS RTC to use as inputs."
	requiredArgs=["segmentLocation","sensor"]
	args=[
            {       
				name=segmentLocation
				description="Segment location in form [A-F][1-82]"
				type=string
            }
			{
				name=sensor
				description="Sensor to add to list of sensor inputs"
				enum=[1,2,3,4,5,6,ALL]
			}
		]
		resultType=[
                    {
        				name=status
         				description="Indicates if command was completed successfully or failed"
        				enum=[SUCCESS, ERROR]
                    }
       ]
}
{
	name=DisableSensor
	description="DisableSensor() removes the 'sensor' at 'segmentLocation' to the list of sensors for the M1CS RTC to use as inputs."
	requiredArgs=["segmentLocation","sensor"]
	args=[
            {       
				name=segmentLocation
				description="Segment location in form [A-F][1-82]"
				type=string
            }
			{
				name=sensor
				description="Sensor to remove from list of sensor inputs"
				enum=[1,2,3,4,5,6,ALL]
			}
		]
		resultType=[
                    {
        				name=status
         				description="Indicates if command was completed successfully or failed"
        				enum=[SUCCESS, ERROR]
                    }
       ]
}
{
	name=SetLoggingMode
	description="Configures what data the M1CS stores in the Engineering Database."
	requiredArgs=["dataProducts"]
	args=[
			{
				name=dataProducts
				description="list of data products to be recorded."
				type=integer
			}
		]
		resultType=[
                    {
        				name=status
         				description="Indicates if command was completed successfully or failed"
        				enum=[SUCCESS, ERROR]
                    }
       ]
}
{
	name=ActuatorToSensorSelfTest
	description="Allows the telescope operator to verify the actuators and sensors are functioning correctly."
	resultType=[
                {
    				name=status
     				description="Indicates if command was completed successfully or failed"
    				enum=[SUCCESS, ERROR]
                }
   ]
}

# Command section for commands originating from the APS
{
	name=SaveSensorSettings
	description=""""
	            |This command saves the internal parameters the M1CS  that determines the current rigid body position of the primary mirror segments
	            | in order to allow the position of the segments to be restored in the future.
	            """"
	requiredArgs=["alignmentState"]
	args=[
			{
				name=alignmentState
				description="Indicates the state of the mirror alignment procedure."
				enum = [INITIAL, PARTIALLY,  ALIGNED, SENSOR_CAL, DIAG ]
			}
			{
            	name=metadata
            	description="Accompanying metadata describing the settings being saved."
            	type=string
        	}
		]
    resultType = [{
      name = sensorSettingsDataId
      type = integer
      description = "The key the M1CS database that can be used to reference the internal parameters being stored.  0 on error."
    }]
}
{
	name=RestoreSensorSettings
	description="Instructs the M1CS to restore the internal settings that were previously stored with the call to SaveSensorSettings()."
	requiredArgs=["sensorSettingsDataId"]
	args=[
			{
				name=sensorSettingsDataId
				description="The key the M1CS database returned to identify the set of parameters to be restored."
				type = integer
			}
		]
    resultType = [
      {
          name = alignmentState
          enum = [INITIAL, PARTIALLY,  ALIGNED, SENSOR_CAL, DIAG]
          description = "Indicates the state of the mirror alignment procedure."
      }
      {
          name = metadata
          type = string
          description = "Accompanying metadata describing the settings being saved."
       }
       {
          name = status
          enum = [COMPLETED , ERROR]
          description = "An error will be returned if the segments have been replaced since the parameters were saved."
       }
    ]
}
{
	name=GetSensorSettings
	description=""""
	             |Returns the value of the key for the internal settings that M1CS is currently using.
	             | If any of the settings have been changed since they were last stored in the database
	             | this command will call SaveSensorSettings() to store them then return the new sensorSettingsDataId key.
	             """"

    resultType = [{
      name = sensorSettingsDataId
      type = integer
      description = "The key the M1CS database that can be used to reference the internal parameters being stored.  0 on error."
    }]
}





{
        name=OffsetActuatorPositions
        description=""""
                     |Updates the offset term of the sensor calibration coefficient’s that the M1CS RTC is using such that the actuators
                     |target position will move by the amount specified in the actuatorOffsets[] parameter.
                     | This command will return an error if the RTC is not in TRACK mode.
                     """"
		requiredArgs=["actuatorOffsets"]
        parameters=[
            {
				name=actuatorOffsets
				description="The desired amount to offset the actuator target positions across the mirror in mm."
				type=array
				dimensions=[492,3]
				items = {
					type=float
				}
				units = millimeter
            }
        ]
        resultType=[
            {
				name=status
 				description="Indicates if command was completed successfully or failed"
				enum=[COMPLETED, ERROR]
            }
        ]
	completionType=longRunning
}
{
        name=OffsetActuatorPositionsOpenLoop
        description=""""
                     |Changes the current actuator target positions by the amount specified in the actuatorOffsets[] parameter.
                     |This command will return an error if the RTC is in TRACK mode.
                     """"
		requiredArgs=["actuatorOffsets"]
        parameters=[
            {
				name=actuatorOffsets
				description="The desired amount to offset the actuator target positions across the mirror in mm."
				type=array
				dimensions=[492,3]
				items = {
					type=float
				}
				units = millimeter
            }
        ]
        resultType=[
            {
				name=status
 				description="Indicates if command was completed successfully or failed"
				enum=[COMPLETED, ERROR]
            }
        ]
	completionType=longRunning
}
{
        name=OffloadSensorOffsets
        description=""""
                    |Corrects the observed height offset in the edge sensor electronics.
                    |The command uses the offset term in the RTCs  sensor calibration coefficients to calculate new sensor waveform parameters such that
                    |sensor controller FPGA’s will remove the observed height offset and operate as a near perfect sensor about their  zero point.
                    |Note, the correction is not numerically exact.  After downloading the new waveforms into the FPGAs the offset term in the sensor calibration
                    |coefficients will be set to 0.
                    |The new configuration parameters are stored as if the SaveSensorSettings() command was called and the resulting ‘sensorSettingsDataId’
                    |is returned.
                    """"
        requiredArgs=["segmentLocation"]
        parameters=[
            {
                name=segmentLocation
				description="Segment location in form [A-F][1-82] or ALL for all segments"
				type=string
            }
        ]
		resultType=[
			{
				name=sensorSettingsDataId
				description="The key the M1CS database that can be used to reference the internal parameters being stored.  0 on error."
				type=integer
				minimum=0
			}
		]
		completionType=longRunning
}

# APS Warping Harness commands

{
        name=CalibrateWarpingHarness
        description=""""
                    |Calibrate new parameters for the warping harness strain vs motor position curve then position the motor to the minimum starting point
                    |of the zero strain deadband position. The strain curves, one per warping harness,  are characterized by a negative strain slope,
                    |starting  position of the zero strain deadband, strain offset of deadband region, width of deadband region, and  positive strain slope.
                    """""
        requiredArgs=["segmentLocation", "warpingHarness"]
        parameters=[    
            {
                name=segmentLocation
				description="Segment location in form [A-F][1-82]"
                type=string
            }       
            {
                name=warpingHarness
                description="Warping Harness Motor Number [0=all, 1-21]"
                type=integer
				minimum=0
				maximum=21
            }
        ]
        resultType=[
            {
                name=status
                description="Indicates if command was completed successfully or failed"
                enum=[success, fail]
            }
        ]
        completionType=longRunning
}
{
        name=GetWarpingHarnessConfig
        description="This command retrieves the warping harness configuration parameters that the segment is using.."
        requiredArgs=["segmentLocation"]
        parameters=[    
            {
                name=segmentLocation
				description="Segment location in form [A-F][1-82]"
                type=string
            }       
        ]
        resultType=[
            {
				name=status
				description="Indicates if command was completed successfully or failed"
				enum=[success, fail]
            }
        	{
                name=deadbandOffset
				type=array
				units=newton
				dimensions=[21]
                items = {
                    type=float
                }
                description="Deadband Offset"
        	}
            {
                name=deadbandWidth
				type=array
				dimensions=[21]
                items = {
                    type=float
                }
                description="Deadband Width in motor steps"
            }
			{
                name=negativeStrainLimit
				type=array
				units=newton
				dimensions=[21]
				items = {
                    type=float
                }
                description="Negative Strain Limit"
            }
			{
                name=positiveStrainLimit
				type=array
				units=newton
				dimensions=[21]
                items = {
                    type=float
                }
            	description="Positive Strain Limit"
            }
			{
                name=negativeStrainSlope
				type=array
				units=newton
				dimensions=[21]
                items = {
                    type=float
                }
                description="Negative strain slope in newton/motorstep"
            }
			{
                name=positiveStrainSlope
				type=array
				units=newton
				dimensions=[21]
                items = {
                    type=float
                }
            	description="Positive strain slope in newton/motorstep"
            }
        ]
        completionType=longRunning
}
{
        name=ReadWarpingHarness
        description="Returns the force being applied by the warping harnesses for all of the segments installed on the telescope."
        resultType=[
            {
				name=status
				description="Indicates if command was completed successfully or failed"
				enum=[success, fail]
            }
            {
                name=measuredForce
                description="The force being applied by the warping harnesses for all 492 segments"
				type=array
				units=newton
                dimensions=[492, 21]
                items = {
                    type=float
                }
            }
        ]
        completionType=longRunning
}

{
        name=SetWarpingHarness
        description=""""
                    |Moves  the warping harness motors for the segment installed at ‘segmentLocation’ until the associated warping harnesses are applying
                    |the requested 'force' to the segment. While the M1CS supports sending multiple commands in succession to different segmentLocations
                    | the command will be rejected if the segment’s warping harness motors are already busy moving.
                    """"
        requiredArgs=["segmentLocation", "desiredForce"]
        parameters=[
            {
                name=segmentLocation
				description="Segment location in form [A-F][1-82]"
                type=string
            }
            {
                name=desiredForce
                description="Desired force values for the segment"
                type=array
				units=newton
                dimensions=[21]
                items = {
                    type=float
                }
            }
        ]
        resultType=[
            {
                name=status
                description="Indicates if command was completed successfully or failed"
                enum=[success, fail]
            }
            {
                name=measuredForce
                description="The force measured  after the motors finish moving."
                type=array
               	units=newton
                dimensions=[21]
                items = {
                         type=float
                        }
            }

        ]
        completionType=longRunning
}
{
        name=OffsetWarpingHarness
        description=""""
                    |Moves the warping harness motors for the segment installed at ‘segmentLocation’ such that the forces applied to the segment are
                    |changed by deltaForce. While the M1CS supports sending multiple commands in succession to different segmentLocations
                    |the command will be rejected if the segment’s warping harness motors are already busy moving.
                    """"
        requiredArgs=["segmentLocation", "deltaForce"]
        parameters=[
            {       
				name=segmentLocation
				description="Segment location in form [A-F][1-82]"
				type=string
            }
            {       
				name=deltaForce
				description="Desired delta force values for the segment"
				type=array
				units=newton
				dimensions=[21]
				items = {
					type=float
				}
			}
        ]
        resultType=[
            {
				name=status
				description="Indicates if command was completed successfully or failed"
				enum=[success, fail]
        	}
          {
                 name=measuredForce
                 description="The force measured  after the motors finish moving."
                 type=array
                	units=newton
                 dimensions=[21]
                 items = {
                          type=float
                         }
             }

        ]
        completionType=longRunning
}

{
        name=GetSegmentIds
        description="GetSegmentIds() will return the value of the segment electronic id’s of all of the segments installed on the telescope."
        resultType=[
            {
				name=status
				description="Indicates if command was completed successfully or failed"
				enum=[success, fail]
            }
            {
                name=segmentElectronicsIds
                description="Segment Electronics IDs in Segment ID order [A-F][1-82]"
				type=array
                dimensions=[492]
                items = {
                    type=integer
                }
            }
        ]
        completionType=longRunning
}



# These are either deprecated or not used by APS


{
        name=SaveSensorReadings
		description="SaveSensorReadings() will save the current raw sensor height and gap values. If the current sensor calibration coefficients are not already saved then this command will automatically save them as if the SaveSensorCalibCoeff command was called. A successful completion will return the ‘sensorCalibrationDatasetId’.  An error saving the dataset will return a 0."
        requiredArgs=["sensorReadingType"]
        parameters=[
            {
                name=sensorReadingType
 				description="Type indicating whether the saved readings will be of the aligned or diagnostic variety"
                enum=[aligned, diagnostic]
            }
            {
                name=metadata
				description="Accompanying metadata for sensor readings being saved (optional)"
                type=string
            }
        ]
        resultType=[    
            {
                name=sensorCalibrationDatasetId
                type=integer
                description="Provides Sensor Calibration Dataset ID or 0 upon failure"
				minimum=0
            }
        ]
        completionType=longRunning
}
{
        name=CalculateSensorCalibCoeff
        description=""""
                    |CalculateSensorCalibCoeff() will calculate new sensor calibration coefficients for the given segmentLocation using the specified ‘algorithm’
                    |and the data defined by the list of sensorCalibrationDatasetIds and update the GLCs Real-Time Loop to use them. Upon successfully updating
                    |the Real-Time Loop the SaveSensorSettings will save the new coefficients.  The available list of algorithms are TBD.  These sensorCalibrationDatasetIds
                    |would have been saved earlier using the SaveSensorReadings command.  The datasets should be from different zenith angles and (ideally) temperatures as well.
                    |A successful completion will return the ‘sensorCalibCoeffId‘ or 0 upon failure.
                    """"
        requiredArgs=["segmentLocation", "algorithm", "sensorCalibDatasetId"]
        parameters=[
            {
                name=segmentLocation
				description="Segment location in form [A-F][1-82] or ALL for all segments"
                type=string
            }
            {
                name=algorithm
                description="Algorithm to use to generate coefficients"
                enum=[alg_tbd1, alg_tbd2, alg_tbdn]
            }
        	{
                name=sensorCalibDatasetId
                description="List of sensor calibration data set ID's to use."
                type=array
                dimensions=[10]
                items = {
                    type=integer
                }
            }
        ]
        resultType=[
            {
                name=status
                enum=[SUCCESS,FAILURE]
                description="Indicates if command was completed successfully or failed."
				minimum=0
        	}
        ]
        completionType=longRunning
}
{
	name=OffsetWarpingHarnessPosition
    description=""""
                |Moves the warping harness motors for the segment installed at segmentLocation by the specified number of motorSteps.
                |While the M1CS supports sending multiple commands in succession to different segmentLocations.
                |The command will be rejected if the segment’s warping harness are already busy moving.
                """"
	requiredArgs=["segmentLocation","motorSteps"]
	args=[
            {
				name=segmentLocation
				description="Segment location in form [A-F][1-82]"
				type=string
            }
             {
 				name=motorSteps
 				description="number of steps to move the warping harness motors."
 				type=array
 				dimensions=[21]
                 items = {
                     type=integer
                 }
             }
		]
   resultType=[
            {
				name=status
 				description="Indicates if command was completed successfully or failed"
				enum=[SUCCESS, ERROR]
            }
       ]
}
{
        name=OffsetWHPosition
        description="OffsetWHPosition() will move the warping harness motors for the segment installed at ‘segmentLocation’ by the specified number of ‘motorSteps’.  While the M1CS supports sending multiple commands in succession to different ‘segmentLocations’ the command will be rejected if the segment’s warping harness are already busy moving."
        requiredArgs=["segmentLocation", "motorOffsets"]
        parameters=[
            {       
				name=segmentLocation
				description="Segment location in form [A-F][1-82]"
				type=string
            }
            {       
				name=motorOffsets
				description="""Fixed motor offsets (steps) for designated segment"""
				type=array
				dimensions=[21]
				items = {
					type=integer
				}
			}
        ]
        resultType=[
            {
				name=status
				description="Indicates if command was completed successfully or failed"
				enum=[success, fail]
            }
        ]
        completionType=longRunning
}





]
# The following commands are send from the M1CS GLC to the M1CS Segment HCD
send=[
	{
		name=GetOneSegSensorConfig
		subsystem=M1CS
		component=SEGHCD
	}
	{
		name=SetOneSegSensorWaveform
		subsystem=M1CS
		component=SEGHCD
	}
	{
		name=GetAllSegSensorConfig
		subsystem=M1CS
		component=SEGHCD
	}
	{
		name=SetAllSegSensorWaveform
		subsystem=M1CS
		component=SEGHCD
	}
	{
		name=SetActuator
		subsystem=M1CS
		component=SEGHCD
	}
	{
		name=EnableActuator
		subsystem=M1CS
		component=SEGHCD
	}
	{
		name=EnableSegment
		subsystem=M1CS
		component=SEGHCD
	}
	{
		name=DisableSegment
		subsystem=M1CS
		component=SEGHCD
	}
	{
		name=EnableEdgeSensor
		subsystem=M1CS
		component=SEGHCD
	}
	{
		name=CalOneWh
		subsystem=M1CS
		component=SEGHCD
	}
	{
		name=CalOneWhAllSegments
		subsystem=M1CS
		component=SEGHCD
	}
	{
		name=CalAllWhOnSegment
		subsystem=M1CS
		component=SEGHCD
	}
	{
		name=CalAllWh
		subsystem=M1CS
		component=SEGHCD
	}
	{
		name=SetSegmentWhStrains
		subsystem=M1CS
		component=SEGHCD
	}
	{
		name=OffsetSegmentWhStrains
		subsystem=M1CS
		component=SEGHCD
	}
	{
		name=GetSegmentWhStrains
		subsystem=M1CS
		component=SEGHCD
	}
	{
		name=OffsetSegmentWhPositions
		subsystem=M1CS
		component=SEGHCD
	}
	{
		name=InitSegmentWhPosition
		subsystem=M1CS
		component=SEGHCD
	}
	{
		name=GetAllWhConfig
		subsystem=M1CS
		component=SEGHCD
	}
]
