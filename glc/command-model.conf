subsystem = M1CS
component = GLC
description = """
  The Control Assembly (GLC) receives commands for M1CS from outside of M1CS.

  - *Note*: explicit SUCCESS/FAILURE resultTypes have been removed because they are redudant with CSW Completed/Error return types. KG-8/22/25
  - *Note*: time parameters were removed in cases where they duplicated the time included in CSW events. KG: 8/28/25
"""
receive = [

  {
    # Command section for commands originating from the TCS or APS
    name = SetM1CSMode
    description = "Changes the M1CS Operation Mode to Idle, Tracking or Halted."
    requiredArgs = [mode]
    args = [
      {
        name = mode
        description = "Changes the M1CS Operations Mode."
        enum = [HALT, IDLE, TRACK]
      }
    ]
  }
  {
    name = ClearOuterLoopState
    description = "Used by TCS to clear the internal state information used by the RTC's outer loop as the TCS corrections module changes between AGWFS and NIFIRAOS."
  }
  {
    name = SaveActPositions
    description = "Updates the M1CS Actuator Lookup Table for the current zenith angle."
    requiredArgs = [duration]
    args = [
      {
        name = duration
        description = "The length of time to average the instantaneous actuator positions."
        type = integer
        units = second
        default = 10
      }
    ]
  }
  {
    name = MeasureAMatrix
    description = "Directs the M1CS to perform the A-matrix measurement routine at the current zenith angle and updates the RTC control matrices."
    args = [
      {
        name = algorithm
        description = "Identifier to support more advanced algorithms described in M1CS OCDD to be described.  Initially should be RGB algorithm."
        enum = [RGB]
        units = second
        default = RGB
      }
      {
        name = duration
        description = "The length of time to average the segment heights and actuator positions."
        type = integer
        default = 10
        units = second
      }
    ]
  }

  {
    name = InitializeSegment
    description = """
                Initialise segment in mirror cell location segmentLocation for the electronic id  segmentId.  This command would also:

                1. Calculate new sensor waveform parameters for the segment using the segment manufacturing data for this segment and its neighbouring segments
                2. Reset the sensor calibration coefficients used by the RTC.
                3. TuneSensorPhases() to correct the sensor height and gap waveform parameters.
                4. Update the A & B matrices to slave the new segment.
                5. Check the strain gauge readouts against the last known values.  Alternatively we may elect to simply reset these values to new default values.
                """
    requiredArgs = [segmentLocation, segmentId]
    args = [
      {
        name = segmentLocation
        description = "Segment location in form [A-F][1-82]"
        type = string
      }
      {
        name = segmentId
        description = "Serial number from segments Electronic ID chip"
        type = long
      }
    ]
  }

  {
    name = EnableSegment
    description = "Configure the segment located at 'segmentLocation' for operation then add the segment to the list of segments controlled by the M1CS RTC."
    requiredArgs = [segmentLocation]
    args = [
      {
        name = segmentLocation
        description = "Segment location in form [A-F][1-82]"
        type = string
      }
    ]
  }

  {
    name = DisableSegment
    description = "Remove the segment located at 'segmentLocation' from the list of segments controlled by the M1CS RTC, then place the segment in the destacked state."
    requiredArgs = [segmentLocation]
    args = [
      {
        name = segmentLocation
        description = "Segment location in form [A-F][1-82]"
        type = string
      }
    ]
  }

  {
    name = EnableActuator
    description = "Configures one or all actuators at 'segmentLocation' for TRACK mode if it is not already tracking, then adds the actuator(s) to the list of actuators controlled by the M1CS RTC."
    requiredArgs = [segmentLocation, actuatorId]
    args = [
      {
        name = segmentLocation
        description = "Segment location in form [A-F][1-82]"
        type = string
      }
      {
        name = actuatorId
        description = "Actuator on segment to be enabled."
        enum = [1, 2, 3, ALL]
      }
    ]
  }

  {
    name = DisableActuator
    description = "Removes the one or all of the actuators at 'segmentLocation' from the list of actuators controlled by the M1CS RTC."
    requiredArgs = [segmentLocation, actuatorId]
    args = [
      {
        name = segmentLocation
        description = "Segment location in form [A-F][1-82]"
        type = string
      }
      {
        name = actuatorId
        description = "Actuator on segment to be disabled."
        enum = [1, 2, 3, ALL]
      }
    ]
  }

  {
    name = EnableSensor
    description = "Adds the one or all sensors at 'segmentLocation' to the list of sensors in use as inputs to the M1CS RTC control loop."
    requiredArgs = [segmentLocation, sensorId]
    args = [
      {
        name = segmentLocation
        description = "Segment location in form [A-F][1-82]"
        type = string
      }
      {
        name = sensorId
        description = "Sensor to add to list of sensor inputs"
        enum = [1, 2, 3, 4, 5, 6, ALL]
      }
    ]
  }

  {
    name = DisableSensor
    description = "Removes one or all sensors at 'segmentLocation' from the list of sensors for the M1CS RTC uses as inputs."
    requiredArgs = [segmentLocation, sensorId]
    args = [
      {
        name = segmentLocation
        description = "Segment location in form [A-F][1-82]"
        type = string
      }
      {
        name = sensorId
        description = "Sensor to remove from list of sensor inputs"
        enum = [1, 2, 3, 4, 5, 6, ALL]
      }
    ]
  }

  {
    name = DiagnosticMode
    description = """
      Configures additional event publishing for M1 diagnostic modes.

      Possible values are: M1WarpingHarnessStrains, M1PistonTipTilt, M1SensorGaps, M1SensorHeights, M1ActuatorPositions, M1OuterLoopControlCommands
     """
    requiredArgs = [hint]
    args = [
      {
        name = hint
        description = "The name of one or more diagnostic mode events. See command description for possible values."
        type = string
      }
    ]
  }

  {
    name = GetWarpingHarnessStrains
    description = """
      Returns the current warping harness strain gauge force for each of the 21 strain gauges on the 492 segments.
    """
    resultType=[
      {
        name=strain
        description="Current value of each of the 21 strain gauges attached to the 492 segments."
        type = array
        dimensions = [492,21]
        items = {
          type=float
        }
        units=newton
      }
      {
        name=highLimit
        description="Upper limit for each of the 21 gauges attached to the 492 segments."
        type = array
        dimensions = [492,21]
        items = {
          type=float
        }
        units=newton
      }
      {
        name=lowLimit
        description="Lower limit for each of the 21 gauges attached to the 492 segments."
        type = array
        dimensions = [492,21]
        items = {
          type=float
        }
        units=newton
      }
    ]
  }

  {
    name = GetPistonTipTilt
    description = """
      Returns the current and target outer control loop piston, tip and tilt values.
    """
    resultType=[
        {
          name = current
          description = "Current M1 Tip(0), Tilt(1), Piston(2)"
          type = array
          units = micron
          dimensions = [3]
          items = {
            type = float
          }
        }
        {
          name = target
          description = "M1 Tip(0), Tilt(1), Piston(2) target from the TCS elevation angle."
          type = array
          units = micron
          dimensions = [3]
          items = {
            type = float
          }
        }
      ]
  }

  {
    name = GetSensorValues
    description = """
      Returns current sensor gaps and heights from RTC. *Note that not all segments have the same number of sensors!*
    """
    resultType = [
      {
        name = gaps
        description = "Calculated edge sensor gaps from RTC."
        type = array
        units = micron
        dimensions = [2772]
        items = {
          type = float
        }
      }
      {
        name = heights
        description = "Calculated edge sensor heights after correcting for gap."
        type = array
        units = micron
        dimensions = [2772]
        items = {
          type = float
        }
      }
    ]
  }

  {
    name = GetOuterLoopControlCmds
    description = """
      Returns the current and target outer control loop piston, tip and tilt values.
    """
    resultType=[
      {
        name = cmds
        description = "Calculated outer loop controller commands."
        type = array
        units = micron
        dimensions = [24]
        items = {
          type = float
        }
      }
    ]
  }


  {
    name = ActuatorToSensorSelfTest
    description = "Allows the telescope operator to verify the actuators and sensors are functioning correctly."
  }

  # Command section for commands originating from the APS
  {
    name = SaveSensorSettings
    description = """
	            |This command saves the internal parameters the M1CS  that determines the current rigid body position of the primary mirror segments
	            | in order to allow the position of the segments to be restored in the future.
	            """
    requiredArgs = [alignmentState]
    args = [
      {
        name = alignmentState
        description = "Indicates the state of the mirror alignment procedure."
        enum = [INITIAL, PARTIALLY, ALIGNED, SENSOR_CAL, DIAG]
      }
      {
        name = metadata
        description = "Accompanying metadata describing the settings being saved."
        type = string
      }
    ]
    resultType = [
      {
        name = sensorSettingsDataId
        type = integer
        description = "The key the M1CS database that can be used to reference the internal parameters being stored.  0 on error."
      }
    ]
  }

  {
    name = RestoreSensorSettings
    description = "Instructs the M1CS to restore the internal settings that were previously stored with the call to SaveSensorSettings()."
    requiredArgs = [sensorSettingsDataId]
    args = [
      {
        name = sensorSettingsDataId
        description = "The key the M1CS database returned to identify the set of parameters to be restored."
        type = integer
      }
    ]
    resultType = [
      {
        name = alignmentState
        enum = [INITIAL, PARTIALLY, ALIGNED, SENSOR_CAL, DIAG]
        description = "Indicates the state of the mirror alignment procedure."
      }
      {
        name = metadata
        type = string
        description = "Accompanying metadata describing the settings being saved."
      }
    ]
  }

  {
    name = GetSensorSettings
    description = """
	             |Returns the value of the key for the internal settings that M1CS is currently using.
	             | If any of the settings have been changed since they were last stored in the database
	             | this command will call SaveSensorSettings() to store them then return the new sensorSettingsDataId key.
	             """

    resultType = [{
      name = sensorSettingsDataId
      type = integer
      description = "The key the M1CS database that can be used to reference the internal parameters being stored.  0 on error."
    }]
  }


  {
    name = OffsetActuatorPositions
    description = """
                     |Updates the offset term of the sensor calibration coefficient’s that the M1CS RTC is using such that the actuators
                     |target position will move by the amount specified in the actuatorOffsets[] parameter.
                     | This command will return an error if the RTC is not in TRACK mode.
                     """
    requiredArgs = [actuatorOffsets]
    parameters = [
      {
        name = actuatorOffsets
        description = "The desired amount to offset the actuator target positions across the mirror in mm."
        type = array
        dimensions = [492, 3]
        items = {
          type = float
        }
        units = millimeter
      }
    ]
    completionType = longRunning
  }

  {
    name = OffsetActuatorPositionsOpenLoop
    description = """
                     |Changes the current actuator target positions by the amount specified in the actuatorOffsets[] parameter.
                     |This command will return an error if the RTC is in TRACK mode.
                     """
    requiredArgs = [actuatorOffsets]
    parameters = [
      {
        name = actuatorOffsets
        description = "The desired amount to offset the actuator target positions across the mirror in mm."
        type = array
        dimensions = [492, 3]
        items = {
          type = float
        }
        units = millimeter
      }
    ]
    completionType = longRunning
  }

  {
    name = OffloadSensorOffsets
    description = """
                    |Corrects the observed height offset in the edge sensor electronics.
                    |The command uses the offset term in the RTCs  sensor calibration coefficients to calculate new sensor waveform parameters such that
                    |sensor controller FPGA’s will remove the observed height offset and operate as a near perfect sensor about their  zero point.
                    |Note, the correction is not numerically exact.  After downloading the new waveforms into the FPGAs the offset term in the sensor calibration
                    |coefficients will be set to 0.
                    |The new configuration parameters are stored as if the SaveSensorSettings() command was called and the resulting ‘sensorSettingsDataId’
                    |is returned.
                    """
    requiredArgs = [segmentLocation]
    parameters = [
      {
        name = segmentLocation
        description = "Segment location in form [A-F][1-82] or ALL for all segments"
        type = string
      }
    ]
    resultType = [
      {
        name = sensorSettingsDataId
        description = "The key in the M1CS Database that can be used to reference the parameters stored previously.  CSW Error is returned if the operation fails."
        type = integer
        minimum = 0
      }
    ]
    completionType = longRunning
  }

  # APS Warping Harness commands

  {
    name = CalibrateWarpingHarness
    description = """
                    |Calibrate new parameters for the warping harness strain vs motor position curve then position the motor to the minimum starting point
                    |of the zero strain deadband position. The strain curves, one per warping harness, are characterized by a negative strain slope,
                    |starting  position of the zero strain deadband, strain offset of deadband region, width of deadband region, and  positive strain slope.
                    """"
    requiredArgs = ["segmentLocation", "warpingHarness"]
    parameters = [
      {
        name = segmentLocation
        description = "Segment location in form [A-F][1-82]"
        type = string
      }
      {
        name = warpingHarness
        description = "Warping Harness Motor Number [0=all, 1-21]"
        type = integer
        minimum = 0
        maximum = 21
      }
    ]
    completionType = longRunning
  }

  {
    name = GetWarpingHarnessConfig
    description = "Retrieve the warping harness configuration parameters in use by the specified segment."
    requiredArgs = [segmentLocation]
    parameters = [
      {
        name = segmentLocation
        description = "Segment location in form [A-F][1-82]"
        type = string
      }
    ]
    resultType = [
      {
        name = deadbandOffset
        type = array
        units = newton
        dimensions = [21]
        items = {
          type = float
        }
        description = "Deadband Offset"
      }
      {
        name = deadbandWidth
        type = array
        dimensions = [21]
        items = {
          type = float
        }
        description = "Deadband Width in motor steps"
      }
      {
        name = negativeStrainLimit
        type = array
        units = newton
        dimensions = [21]
        items = {
          type = float
        }
        description = "Negative Strain Limit"
      }
      {
        name = positiveStrainLimit
        type = array
        units = newton
        dimensions = [21]
        items = {
          type = float
        }
        description = "Positive Strain Limit"
      }
      {
        name = negativeStrainSlope
        type = array
        units = newton
        dimensions = [21]
        items = {
          type = float
        }
        description = "Negative strain slope in newton/motorstep"
      }
      {
        name = positiveStrainSlope
        type = array
        units = newton
        dimensions = [21]
        items = {
          type = float
        }
        description = "Positive strain slope in newton/motorstep"
      }
    ]
    completionType = longRunning
  }

  {
    name = ReadWarpingHarness
    description = "Returns the force being applied by the warping harnesses for all of the segments installed on the telescope."
    resultType = [
      {
        name = measuredForce
        description = "The force being applied by the warping harnesses for all 492 segments"
        type = array
        units = newton
        dimensions = [492, 21]
        items = {
          type = float
        }
      }
    ]
    completionType = longRunning
  }

  {
    name = SetWarpingHarness
    description = """
                    |Moves  the warping harness motors for the segment installed at ‘segmentLocation’ until the associated warping harnesses are applying
                    |the requested 'force' to the segment. While the M1CS supports sending multiple commands in succession to different segmentLocations
                    | the command will be rejected if the segment’s warping harness motors are already busy moving.
                    """
    requiredArgs = [segmentLocation, desiredForce]
    parameters = [
      {
        name = segmentLocation
        description = "Segment location in form [A-F][1-82]"
        type = string
      }
      {
        name = desiredForce
        description = "Desired force values for the segment"
        type = array
        units = newton
        dimensions = [21]
        items = {
          type = float
        }
      }
    ]
    resultType = [
      {
        name = measuredForce
        description = "The force measured  after the motors finish moving."
        type = array
        units = newton
        dimensions = [21]
        items = {
          type = float
        }
      }

    ]
    completionType = longRunning
  }

  {
    name = OffsetWarpingHarness
    description = """
                    |Moves the warping harness motors for the segment installed at ‘segmentLocation’ such that the forces applied to the segment are
                    |changed by deltaForce. While the M1CS supports sending multiple commands in succession to different segmentLocations
                    |the command will be rejected if the segment’s warping harness motors are already busy moving.
                    """
    requiredArgs = [segmentLocation, deltaForce]
    parameters = [
      {
        name = segmentLocation
        description = "Segment location in form [A-F][1-82]"
        type = string
      }
      {
        name = deltaForce
        description = "Desired delta force values for the segment"
        type = array
        units = newton
        dimensions = [21]
        items = {
          type = float
        }
      }
    ]
    resultType = [
      {
        name = measuredForce
        description = "The force measured  after the motors finish moving."
        type = array
        units = newton
        dimensions = [21]
        items = {
          type = float
        }
      }

    ]
    completionType = longRunning
  }

  {
    name = GetSegmentIds
    description = "Returns the segment electronic id’s of all of the segments installed on the telescope."
    resultType = [
      {
        name = segmentElectronicsIds
        description = "Segment Electronics IDs in Segment ID order [A-F][1-82]"
        type = array
        dimensions = [492]
        items = {
          type = integer
        }
      }
    ]
    completionType = longRunning
  }


]
# The following commands are send from the M1CS GLC to the M1CS Segment HCD
send = [
  {
    name = GetOneSegSensorConfig
    subsystem = M1CS
    component = SEGHCD
  }
  {
    name = SetOneSegSensorWaveform
    subsystem = M1CS
    component = SEGHCD
  }
  {
    name = GetAllSegSensorConfig
    subsystem = M1CS
    component = SEGHCD
  }
  {
    name = SetAllSegSensorWaveform
    subsystem = M1CS
    component = SEGHCD
  }
  {
    name = SetActuator
    subsystem = M1CS
    component = SEGHCD
  }
  {
    name = EnableActuator
    subsystem = M1CS
    component = SEGHCD
  }
  {
    name = EnableSegment
    subsystem = M1CS
    component = SEGHCD
  }
  {
    name = DisableSegment
    subsystem = M1CS
    component = SEGHCD
  }
  {
    name = EnableEdgeSensor
    subsystem = M1CS
    component = SEGHCD
  }
  {
    name = CalOneWh
    subsystem = M1CS
    component = SEGHCD
  }
  {
    name = CalOneWhAllSegments
    subsystem = M1CS
    component = SEGHCD
  }
  {
    name = CalAllWhOnSegment
    subsystem = M1CS
    component = SEGHCD
  }
  {
    name = CalAllWh
    subsystem = M1CS
    component = SEGHCD
  }
  {
    name = SetSegmentWhStrains
    subsystem = M1CS
    component = SEGHCD
  }
  {
    name = OffsetSegmentWhStrains
    subsystem = M1CS
    component = SEGHCD
  }
  {
    name = GetSegmentWhStrains
    subsystem = M1CS
    component = SEGHCD
  }
  {
    name = OffsetSegmentWhPositions
    subsystem = M1CS
    component = SEGHCD
  }
  {
    name = InitSegmentWhPosition
    subsystem = M1CS
    component = SEGHCD
  }
  {
    name = GetAllWhConfig
    subsystem = M1CS
    component = SEGHCD
  }
]
